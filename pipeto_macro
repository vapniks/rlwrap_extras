#! /usr/bin/perl

# Modified version of simple_macro & pipeto rlwrap filters: https://github.com/hanslub42/rlwrap/blob/master/filters/
# combined so that you can create macros or commands from piped output (e.g. for selecting sqlite columns using fzf),
# For full documentation run: rlwrap -z pipeto_macro

# Licensed under GPL 2.0 (see COPYING file).

use lib ($ENV{RLWRAP_FILTERDIR} or ".");
use RlwrapFilter;
use POSIX qw(:signal_h ceil);
use strict;
use IPC::Open2;
use Expect;

# We want any piped pager to receive SIGWINCH.
# SIGWINCH is not in POSIX, which means that POSIX.pm doesn't
# know about it. We use 'kill -l' to find it.
my @signals = split /\s+/, `kill -l`; # yuck!
for (my $signo = 1; $signals[$signo-1]; $signo++) {
  if ($signals[$signo-1] eq 'WINCH') {
    my $sigset_unblock = POSIX::SigSet->new($signo);
    unless (defined sigprocmask(SIG_UNBLOCK, $sigset_unblock)) {
      die "Could not unblock signals: $!\n";
    }
  }
}

my $filter = new RlwrapFilter;
my $name = $filter -> name;
my $fzf = "fzf";
my($prompt,$last_prompt);
# This is needed to fix problems with sqlite3 and possibly other REPL's
my $leftover_text;
# $pipeline & $pipesink need to be globals because of the way REPL commands are handled
my($pipeline,$pipesink); 
my $out_chunkno = 0;
my $wait_text = "wait ...";
# Below is the argument separator for parameterised macros.
# It should be a string that is unlikely to occur in any REPL
my $argsep = ":::";
# The char used to indicate the start of a macro name (it should be single quoted).
my $macrochar = '\$';
# The first char used for piping operators, e.g: |, |> & |>>
my $pipechar = '\|';
# Maximum amount of time to wait for a REPL command to return. TODO: should this be an option?
my $max_timeout = 0.5;
# Name of temporary macro used internally (should not start with < or infinite looping will occur)
my $tempmacro = "__temp__";
# Try to get the correct command name
my(@parts,$comm);
if ($ENV{RLWRAP_COMMAND_PID}) {
  open IN, "/proc/$ENV{RLWRAP_COMMAND_PID}/cmdline" or die "Cannot read /proc/$ENV{RLWRAP_COMMAND_PID}/cmdline: $!\n";
  @parts = split("\0",<IN>);
  close IN;
  $parts[0] =~ m"^(?:/\S*/)?([^/\s\0]+)";
  $comm = $1;
} else {
  $filter -> command_line =~ m/(\w+).*/;
  $comm = $1;
}
#print STDERR "\$comm = \"${comm}\"\n";
# newline char (sqlite3 acts strangely without this fix):
my $nl = ($comm =~ /sqlite3|minetest/) ? "\n\r" : "\n";

my(%expansions, $last_raw_input);
# Macros will be saved in the last file given in the args, or the default file if there are no args.
# Store files in reverse priority order (highest priority first).
my @macro_files = ();
my($saved_macros,$exp);
# only store macros if we are wrapping a command (rather than printing documentation)
if ($comm && (length($comm) > 0)) {
  foreach (@ARGV) {
    if ($_ =~ /^-([^-]{1,4})/) {
      $macrochar = ${1};
    } elsif ($_ =~ /^--([^-]{1,4})/) {
      $pipechar = ${1};
    }
    else {
      my $file = $_ =~ m"/" ? $_ : ($ENV{RLWRAP_HOME} || "/usr/share/rlwrap") . "/$_";
      $expansions{$file} = {};
      read_macros($file);
      unshift(@macro_files,$file);
      $saved_macros = $file;
    }
  }
  # if no macro files were supplied on the command line use the default macros file
  if ($#macro_files < 0) {
    @macro_files = (($ENV{RLWRAP_HOME} || "/usr/share/rlwrap") . "/${comm}_macros");
    $saved_macros = $macro_files[0];
    $expansions{$saved_macros} = {};
    read_macros($saved_macros);
  }
  # save macros before quitting
  $SIG{__DIE__} = \&save_macros;
  # when wrapping a command this is needed for sending commands behind the scenes
  # with the cloak_and_dagger2 procedure
  open(CMD_IN_OUT, "+<&" . $ENV{RLWRAP_MASTER_PTY_FD}) or die "Can't dup rlwrap file descriptor: $!";
  $exp = Expect->exp_init(\*CMD_IN_OUT);
}

# Regexps for capturing pipeline parts: $+{i} = input, $+{pl} = shell pipeline including initial pipe,
# $+{plc} = shell pipeline commands (minus initial pipe), $+{ps} = pipesink including initial pipe,
# $+{psm} = pipesink macro name (if any), $+{psc} = pipesink commands (excluding initial pipe & macro name)
my $rx_replcmd = qr/^[^${pipechar}]*/;
my $rx_pipeline = qr/${pipechar}(?!\w*>)(?'plc'([^${pipechar}]|${pipechar}(?!\w*>))*)/;
my $rx_pipesink = qr/${pipechar}(?'psm'\w*)>(?'psc'.*)/;
my $rx_pipesplit = qr/(?'i'${rx_replcmd})(?'pl'${rx_pipeline})?(?'ps'${rx_pipesink})?/;
my $rx_macro = qr/(?<!${macrochar})${macrochar}(?'m'<?[^${macrochar} ]\w*(\[\[.*?\]\])?)/;

# Declare filter handlers
$filter -> prompts_are_never_empty(1); #TODO: do we need this?
$filter -> help_text(help());
$filter -> input_handler(\&expand_and_record_macros); # expand macros in input
$filter -> output_handler(\&output);
$filter -> prompt_handler(\&prompt);
#$filter -> message_handler();
#$filter -> echo_handler(sub {$last_raw_input});   # but echo the raw (un-expanded) input
# hash indicating which functions to print debug messages for:
#my %debug = ('process_pipeline'=>1,'cloak_and_dagger2'=>1,'evalmacro'=>1,'expand_and_record_macros'=>1,'prompt'=>1,'output'=>1,'findmacro'=>1,'complete_macro'=>1,'expect2'=>1,'exp_internal'=>1);
my %debug = ('cloak_and_dagger2'=>0); # 'cloak_and_dagger2' must be set (to 0 or 1) for the next line to work
$filter -> cloak_and_dagger_verbose($debug{'cloak_and_dagger2'});
$filter -> completion_handler(\&complete_macro);
$filter -> run;

# Print debug info: 1st arg should be the name of the function from which it is called,
# 2nd arg indicates whether or not to print current value of global $pipeline variable,
# 3rd arg indicates whether or not to print current value of global $pipesink variable,
# following args are strings to print after $pipesink (one per line)
# simple-call-tree-info: DONE
sub debug_info {
  my $name = shift(@_);
  if ($debug{$name}) {
    $filter->send_output_oob("${name}: " . shift(@_) . "${nl}");
    $filter->send_output_oob("pipeline: \"${pipeline}\"${nl}") if shift(@_);
    $filter->send_output_oob("pipesink: \"${pipesink}\"${nl}") if shift(@_);
    for (@_) {
      $filter->send_output_oob($_ . "${nl}");
    }
  }
}

# TODO: change behaviour in the following way; instead of |> & |>> operators have |> & |WORD> operators
# where the output is stored in macro $WORD. Also, only expand macros in pipesinks when processing them
# so that they can use macros previously created with |WORD> in the pipeline, then there is no longer a
# need for the %% substitutions.

# input_handler
# Expand and/or record macros, and also extract pipeline parts from input.
# The shell pipeline part to be processed is stored in $pipeline (a global variable), and
# the macro name or REPL command to be processed following |> or |>> is stored in $pipesink (a global variable).
# Doubled up occurrences of the $macrochar will not be expanded, but instead replaced by a single $macrochar,
# this prevents problems when the $macrochar is used for other things in shell code (e.g. if $macrochar = \$)
# If a non-zero $fix arg is supplied, then $leftover_text will be removed before returning
# (this should only be done if the returned text is to be sent directly to the REPL).
# simple-call-tree-info: CHECK  
sub expand_and_record_macros {
  my ($unexpanded,$fix) = @_;
  #debug_info('expand_and_record_macros',"unexpanded = \"${unexpanded}\"\nfix = \"${fix}\"");
  my $expanded = $last_raw_input = $unexpanded;
  my $input = '';
  # Expand macro definitions first so that included pipelines don't get mistaken for pipelines following a macro.
  if ($expanded =~ s/^\s*${rx_macro}(\(\((?'mv'.*)\)\))\s*$/findmacro($+{m},$+{mv})/ge) {
    #debug_info('expand_and_record_macros',"expanded to: ${expanded}");
    undef $pipeline;
    undef $pipesink;
  } else {
    # split into parts; we only want to expand the first/input part
    # (other parts are expanded later to allow definitions in |MACRO> operators to be used)
    $expanded =~ ${rx_pipesplit}; # this captures $+{i}, $+{pl}, $+{plc}, $+{ps}, $+{psm} & $+{psc}
    ($input, $pipeline, $pipesink) = ($+{i},$+{pl},$+{ps});
    # keep expanding $input & $pipeline until there are no more macros to be expanded
    #debug_info('expand_and_record_macros',"input = \"${input}\"${nl}",1,1);
    while ($input =~ s/${rx_macro}/findmacro($+{m})/ge
	   || $pipeline =~ s/${rx_macro}/findmacro($+{m})/ge) {
      # need to join & resplit in case the location of the 1st pipesink changed after expansion:
      $expanded = $input . $pipeline . $pipesink;
      $expanded =~ ${rx_pipesplit};
      ($input, $pipeline, $pipesink) = ($+{i},$+{pl},$+{ps});
      #debug_info('expand_and_record_macros',"input = \"${input}\"${nl}",1,1);
    }
    # double $macrochar's were not expanded, and can now be replaced with a single $macrochar
    $input =~ s/(${macrochar})${macrochar}/$1/ge;
    $pipeline =~ s/(${macrochar})${macrochar}/$1/ge;
    #debug_info('expand_and_record_macros',"input = \"${input}\"");
  }
  if ($leftover_text && $fix) {
    # delete any leftover whitespace from previous command executed by evalmacro or process_pipeline
    # so that e.g. dot commands work in sqlite3
    #debug_info('expand_and_record_macros',"removing \"${leftover_text}\" from start of input");
    $input = "\x08" x length($leftover_text) . ($input||'');
    #$input = $input||''; #DEBUG
    $leftover_text = "";
  }
  return $input;
}

# output_handler
# simple-call-tree-info: CHECK  
sub output {
  my $output = $_;
  #debug_info('output',"\$output: \"${output}\"${nl}out_chunkno: $out_chunkno",1,1);
  # If there's a pipeline, replace the 1st chunk by $wait_text
  # (the pipeline output will be printed at the next prompt)
  return $pipeline ? ($out_chunkno++ == 0 ? $wait_text : "")  : $output;
}

# prompt_handler: collect output from last REPL command and feed into process_pipeline if necessary
# (i.e. if $pipeline & $pipesink were found in previous REPL input by expand_and_record_macros)
# simple-call-tree-info: CHECK  
sub prompt {
  my ($prompt) = @_;
  #debug_info('prompt',"last_prompt: \"$last_prompt\"${nl}prompt: \"$prompt\"");
  $out_chunkno = 0;
  $last_prompt = $prompt;
  if ($pipeline || $pipesink) {
    # delete $wait_text which was added by the output_handler (see above)
    $filter->send_output_oob("\x08" x length($wait_text) . "\n");
    my $output = $filter->cumulative_output;
    #debug_info('prompt',"cumulative_output: $output",1,1);
    process_pipeline($output,$prompt,1);
    undef $pipeline;
    undef $pipesink;
  }
  return $prompt;
}

# simple-call-tree-info: CHECK  
sub process_pipeline {
  my ($output,$prompt,$depth) = @_;
  local $SIG{PIPE} = 'IGNORE'; # we don't want to die if the pipeline quits
  if ($pipesink) {
    # process the shell pipeline and store results in @output2
    # TODO: if $output is empty string, then open a one-ended pipeline instead?
    my @output2;
    if ($pipeline =~ $rx_pipeline) {
      my $pid = open2(\*READER, \*WRITER, $+{plc});
      print WRITER $output;
      close WRITER;
      while (<READER>) {
	$_ =~ s/(^\s*|\s*$)//g;
	push @output2, $_;
      }
      close READER;
    } else {
      @output2 = split(/${nl}/,$output);
    }
    $pipesink =~ ${rx_pipesink}; # this captures $+{psm} - the pipesink macro, and $+{psc} - the pipesink command
    #debug_info('process_pipeline',"A: depth = ${depth}\npsc = \"$+{psc}\"\npsm = \"$+{psm}\"",1,1,"output2: ",@output2);
    # Store the output in the pipesink macro if there is one
    my ($cmd,$macroname) = ($+{psc},$+{psm});
    if (${macroname}) { 
      my ${macroname} = $+{psm};
      if (${macroname} =~ /^(\w+)$/) {
	findmacro(${macroname},"@output2");
      } else {
	print STDERR "Invalid pipeline!\n";
	return;
      }
    }
    #debug_info('process_pipeline',"cmd: ${cmd}",1,1);
    my $newcmd = expand_and_record_macros($cmd);    
    my $pipeout = cloak_and_dagger2($newcmd,$prompt,$max_timeout);
    #debug_info('process_pipeline',"B: depth = ${depth}${nl}newcmd= ${newcmd}${nl}pipeout = ${pipeout}",1,1);
    # recurse on output
    if ($pipeline || $pipesink) {
      #debug_info('process_pipeline',"recurse with pipeout = ${pipeout}");
      process_pipeline($pipeout,$prompt,$depth+1);
    } else {
      $filter->send_output_oob($pipeout);
    }
  } else {
    # TODO: if $output is empty string, then call system($pipeline) instead
    open PIPELINE, $pipeline;
    #debug_info('process_pipeline',"C (no pipesink): depth = $depth",1,0,"output = ${output}");
    print PIPELINE $output;
    close PIPELINE; # this waits until pipeline has finished
  }
}

# Substitute for $filter->cloak_and_dagger, which works with sqlite3
# $question = command to send to underlying REPL, $prompt = prompt string to wait for,
# $timeout = max amount of time to wait in seconds 
# simple-call-tree-info: CHECK  
sub cloak_and_dagger2 {
  my ($question, $prompt, $timeout) = @_;
  $prompt ||= $filter -> last('prompt');
  if ($debug{'expect1'}) {
    $exp->debug(1); # general debug mode
  } elsif ($debug{'expect2'}) {
    $exp->debug(2); # verbose debug mode
  }
  if ($debug{'exp_internal'}) {
    $exp->exp_internal(1); # print everything expect sees
  }
  #debug_info('cloak_and_dagger2',"prompt: \"${prompt}\"${nl}question: \"${question}\"");
  $exp->clear_accum();
  $question =~ s/^\s*//;
  $exp->send("${question}${nl}");
  my ($pos,$err,$match,$before,$after) = $exp->expect(ceil($timeout),'-re',"^\Q${prompt}\E");
  #debug_info('cloak_and_dagger2',"pos: ${pos}${nl}error: \"${err}\"${nl}match: \"${match}\"${nl}before: \"${before}\"${nl}after: \"${after}\"");
  $exp->clear_accum();
  $leftover_text = $after;
  return $before;
}

# simple-call-tree-info: CHECK  
sub evalmacro {
  my ($val) = @_;
  my $prompt = $last_prompt . "\s*";
  #debug_info('evalmacro',"val: $val");
  $val =~ s/^\s*//;
  # alter the pipeline so that it stores its output in $tempmacro,
  # and split it into $val2, $pipeline & $pipesink (global variables)
  my $val2 = expand_and_record_macros($val . " ${pipechar}${tempmacro}> ",1);
  #debug_info('evalmacro',"val2: $val2",1,1);
  # evaluate the first part of the pipeline if necessary
  my $output = (length(${val2}) > 0 ? cloak_and_dagger2($val2,$prompt,$max_timeout) : '');
  #debug_info('evalmacro',"output: $output",1,1);
  # Feed $output into $pipeline & $pipesink, which should store the results into $tempmacro, and return this
  process_pipeline($output,$prompt,1);
  return findmacro($tempmacro);
}

# simple-call-tree-info: CHECK  
sub findmacro {
  my($macro,$expansion) = @_;
  my ($eval, $args);
  $macro =~ /(?'e'<)?(?'m'\w+)(\[\[(?'a'.*?)\]\])?/;
  ($eval, $macro, $args) = ($+{e}, $+{m}, $+{a});
  #debug_info('findmacro',"macro: $macro\neval: $eval\nargs: $args\nexpansion: $expansion");
  if ($expansion) {
    if ($expansion eq " ") {
      delete ${$expansions{$macro_files[0]}}{$macro};
    } else {
      return ${$expansions{$macro_files[0]}}{$macro} = $expansion;
    }
  } else {
    foreach (@macro_files) {
      my $val = ${$expansions{$_}}{$macro};
      if ($val) {
	if ($args) {
	  my $i = 1;
	  foreach (split(/${argsep}/,$args)) {
	    # TODO: macroexpand args? could cause problems if they contain pipes, but would be very convenient
	    $val =~ s/(?<!${macrochar})${macrochar}${i}/$_/g;
	    $i += 1;
	  }
	}
	#debug_info('findmacro',"val: $val");
	return $eval ? evalmacro($val) : $val;
      }
    }
  }
  return "";
}

# simple-call-tree-info: DONE
sub safe_backtick {
    my @command_line = @_;
    my $command_line = join ' ', @command_line;
    open my $pipefh, '-|' or exec @command_line or die "$command_line failed: $!\n";
    my $result;
    { local $/;               # slurp all output in one go
      $result = <$pipefh>; 
      close $pipefh;
    }
    chomp $result;            # chop off last newline
    return $result
}

# simple-call-tree-info: CHECK  
sub complete_macro {
  my($line, $prefix, @completions) = @_;
  #debug_info('complete_macro',"prefix: \"$prefix\"${nl}line: \"$line\"");
  if ($prefix =~ /^${macrochar}(?'e'<)?(?'m'\w*)$/) { # completing a macro with no args
    my $eval = $+{e};
    my $query = length($+{m}) > 0 ? "--query '^$+{m}'" : "";
    my @items;
    my %seen;
    foreach (@macro_files) {
      my $file = $_;
      foreach (keys %{$expansions{$file}}) {
	if (!$seen{$_}) {
	  push(@items,$_ . " " . ${$expansions{$file}}{$_});
	  $seen{$_} = 1;
	}
      }
    }
    # Need to make fzf full screen otherwise prompt disappears when it returns
    my $pid = open2(\*READER, \*WRITER, "$fzf -1 +m $query --height=100%|cut -d' ' -f2-");
    local $\ = "\n";
    foreach (@items) { print WRITER $_; }
    close WRITER;
    my $expansion = <READER>;
    close READER;
    chomp($expansion);
    #debug_info('complete_macro',"expansion: $expansion");
    # if $expansion begins with < then run the pipeline to get the completion
    if ($eval) {
      $expansion = evalmacro($expansion); 
    }
    chomp($expansion);
    unshift @completions, $expansion if $expansion;
  } elsif ($prefix =~ /^${macrochar}(<?\w*\[\[.*?\]\])$/) { # completing a macro with args
    my $expansion = findmacro($1);
    unshift @completions, $expansion if $expansion;
  }
  return @completions;
}

# simple-call-tree-info: DONE  
sub read_macros {
  return unless @_;
  my ($file) = @_;
  if (-f $file) {
    -w $file or die "$file exists but is not writable!\n";
    open MACROS, $file or die  "$file exists but is not readable!\n";
    while(<MACROS>) {
      chomp;
      my($macro, $expansion) = /(\S+)\s+(.*)/;
      $expansions{$file} -> {$macro} = $expansion;
    }
    close MACROS;
  }
}

# simple-call-tree-info: DONE  
sub save_macros {
  return unless $saved_macros;
  open MACROS, ">$saved_macros" or die "cannot write to $saved_macros: $!\n"; # this error may be lost
  foreach my $macro (sort keys %{$expansions{$saved_macros}}) {
    print MACROS "$macro ${$expansions{$saved_macros}}{$macro}\n";
  }
  close MACROS;
  close CMD_IN_OUT;
}

# simple-call-tree-info: TODO document macro assignments in pipelines
sub help {
  return <<EOF;
Usage: rlwrap -z '$name [-MACROCHAR] [--PIPECHAR] [<FILE>...]' <COMMAND>
Parameterised macro processing, and pipelines for building REPL commands or macros from shell output.
NOTE: you may need to call rlwrap with -b '' to prevent '\$' being interpreted as a word break.

MACROS

By default the start of a macro name is indicated by \$, and this is used in the documentation below. 
To use a different char(s), set the MACROCHAR option as indicated in the usage string above (\$'s need 
to be backslash quoted, e.g: to set MACROCHAR to \$ use '-\\\$\\\$').

Syntax:
 \$foo       : Use a macro - \$foo will be replaced by its definition when command is entered.
 \$foo<TAB>  : Expand it right now - \$foo will be replaced by its definition immediately.
 \$f<TAB>    : Select a macro using fzf - selection will be limited to macros whose names start with f.
 \$foo((ex pan sion))<ENTER> 
            : (re-)define \$foo to "ex pan sion".
 \$foo((macro arguments were \$1 & \$2))<ENTER>
            : defining a macro with 2 arguments
 \$foo[[this:::that]]<ENTER>
            : calling the macro with 2 arguments, it will expand to: "macro arguments were this & that"
 \$foo(( ))<ENTER> 
            : Delete \$foo (there must be 1 space between the opening & closing parentheses).
 \$<foo<TAB> : Expand & evaluate \$foo, and immediately place results on command line.
              If you use this kind of macro normally without TAB completion then it will be 
              expanded & evaluated when the entire command line is entered, but before the line
              is send to the REPL interpreter. See below for some examples.

Macros are kept between sessions in \$RLWRAP_HOME/<COMMAND>_macros if no <FILE> argument
is supplied, or the last <FILE> argument if there are any.
The file arguments are processed in order, and macros in later files get priority over
those in earlier files. If a file argument contains a / char then it is assumed to be a full
path to the file, otherwise the file is assumed to be in \$RLWRAP_HOME or /usr/share/rlwrap
if \$RLWRAP_HOME is unset.
Only the macros in the last <FILE> (or \$RLWRAP_HOME/<COMMAND>_macros) may be altered or deleted.

PIPELINES

By default we use | as the initial pipeline char, but this can be changed by setting the PIPECHAR
option as indicated in the usage string above (\| & \¦ need to be backslash quoted, e.g. --\\\¦).

Syntax:
 <REPL CMD>  | <SHELL CMD>        : Pipe output from REPL command into STDIN of shell command.
 <SHELL CMD> |> <REPL CMD>        : Run shell command followed by REPL command, replacing any
                                    occurrences of %% in REPL command with output from shell command.
                                    To substitute for the Nth line of output use \%N%
 <SHELL CMD> |>> foo              : Save output from shell command into macro \$foo.
 <SHELL CMD> |>> foo <REPL CMD>   : Combination of previous 2 lines; save shell command output into 
                                    macro \$foo, and then run REPL command after substituting any 
                                    occurrences of %% or \%N% with output from shell command.

These pipeline operators can be chained together to form alternating sequences of REPL & shell commands 
optionally intertwined with macro definitions.
In that case the Nth output from the Mth |> or |>> operator is referenced by using M %s' either side of the 
number N, e.g. %%%2%%% for the 2nd line of output from the 3rd |>(>) operator. If N is 0, or there is no number
between the %'s, then the entire output is inserted.
You can use output from previous |>(>) operators after the most recent one, e.g. in this example <CMD3> is called 
with the 5th line of output from <SHELL CMD1>, and the 1st line of output from <SHELL CMD2>:

  <CMD1> | <SHELL CMD1> |> <CMD2> | <SHELL CMD2> |> <CMD3> %5% %%1%%

You can use pipeline operators in macros, and macros in pipelines. To use a macro char normally without expanding
it you should double it, e.g. to use a shell variable such as \$COLUMNS in a pipeline you would write \$\$COLUMNS
to prevent it being treated as a macro, or to use the \$\$ shell variable you would write \$\$\$\$
 (alternatively you could just select a different char with the -MACROCHAR option).

EXAMPLES

Browse sqlite3 table names with less:               sqlite> .tables|less
Export them to a file:                              sqlite> .tables|cat > tables.txt
View contents of the current directory with less:   sqlite> |ls|less
Create a macro for selecting a table using fzf:     sqlite> \$choosetbl((.tables|fzf --height=100%))
Build a SELECT statement using the macro:           sqlite> SELECT * FROM \$<choosetbl;
Select a command using fzf and view its usage       sqlite> .help | fzf | awk '{print \$1}' |> .help %% | less

Here's a more complex example (split over 2 lines) involving pipeline operators. fzf is used to first choose a table, 
which is stored in the \$tbl macro, and then select some columns from that table, which are stored in the \$cols macro. 
These strings are used to build a SELECT statement which is passed to the REPL:

sqlite> \$choosetbl |>> tbl .schema %% |grep "CREATE TABLE"|sed -e 's/[^()]*(\(.*\))/\\1/g' -e 's/,\s*/\\r\\n/g'\\
 |fzf --height=100%|awk 'BEGIN{x=""}{x=(!x)?\$\$1:x","\$\$1}END{print x}'|>> cols SELECT %%%% FROM %% LIMIT 5;

You could store this whole pipeline, or part of it, in another macro.

Notes: 
 - You may need to redirect STDOUT to STDERR using ">&2" to get some shell commands such as "less" to work in 
   pipelines that pipe their output to a REPL command. 
 - If you use fzf in a pipeline set "--height=100%" in the options to avoid messing up the prompt when it returns.
EOF
}

# NOTES: using this filter tends to create a lot of zombie processes
